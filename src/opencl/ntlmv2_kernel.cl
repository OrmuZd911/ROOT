/*
 * NTLMv2
 * MD4 + 2 x HMAC-MD5
 *
 * Copyright (c) 2012, magnum
 * This software is hereby released to the general public under
 * the following terms: Redistribution and use in source and binary
 * forms, with or without modification, are permitted.
 */

#include "opencl_device_info.h"

#if gpu_amd(DEVICE_INFO)
#define USE_BITSELECT
#endif

/* Workaround for driver bug seen in version 295.49 */
#if 0//gpu_nvidia(DEVICE_INFO)
#define MAYBE_CONSTANT const __global
#else
#define MAYBE_CONSTANT	__constant
#endif

/* Unicode conversion */
typedef uint   UTF32;
typedef ushort UTF16;
typedef uchar  UTF8;

__constant uint halfShift  = 10; /* used for shifting by 10 bits */
__constant UTF32 halfBase = 0x0010000UL;
__constant UTF32 halfMask = 0x3FFUL;

/*
 * Index into the table below with the first byte of a UTF-8 sequence to
 * get the number of trailing bytes that are supposed to follow it.
 * Note that *legal* UTF-8 values can't have 4 or 5-bytes. The table is
 * left as-is for anyone who may want to do such conversion, which was
 * allowed in earlier algorithms.
 *
 * Cut-down version for speed. Use with [c & 0x3f]
 */
__constant char opt_trailingBytesUTF8[64] = {
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2, 3,3,3,3,3,3,3,3,4,4,4,4,5,5,5,5
};

/*
 * Magic values subtracted from a buffer value during UTF8 conversion.
 * This table contains as many values as there might be trailing bytes
 * in a UTF-8 sequence. (Cut-down version, 4 and 5 are illegal).
 */
__constant UTF32 offsetsFromUTF8[6] = { 0x00000000UL, 0x00003080UL, 0x000E2080UL,
		     0x03C82080UL, 0xFA082080UL, 0x82082080UL };

#define UNI_MAX_BMP         (UTF32)0x0000FFFF
#define UNI_SUR_HIGH_START  (UTF32)0xD800
#define UNI_SUR_HIGH_END    (UTF32)0xDBFF
#define UNI_SUR_LOW_START   (UTF32)0xDC00
#define UNI_SUR_LOW_END     (UTF32)0xDFFF

#if 0 // gpu_nvidia(DEVICE_INFO) || amd_gcn(DEVICE_INFO)
inline uint SWAP32(uint x)
{
	x = rotate(x, 16U);
	return ((x & 0x00FF00FF) << 8) + ((x >> 8) & 0x00FF00FF);
}
#else
#define SWAP32(a)	(as_uint(as_uchar4(a).wzyx))
#endif

#if gpu_amd(DEVICE_INFO) || no_byte_addressable(DEVICE_INFO)
#define PUTCHAR(buf, index, val) (buf)[(index)>>2] = ((buf)[(index)>>2] & ~(0xffU << (((index) & 3) << 3))) + ((val) << (((index) & 3) << 3))
#define PUTSHORT(buf, index, val) (buf)[(index)>>1] = ((buf)[(index)>>1] & ~(0xffU << (((index) & 1) << 4))) + ((val) << (((index) & 1) << 4))
#define XORCHAR(buf, index, val) (buf)[(index)>>2] = ((buf)[(index)>>2]) ^ ((val) << (((index) & 3) << 3))
#else
#define PUTCHAR(buf, index, val) ((uchar*)(buf))[index] = (val)
#define PUTSHORT(buf, index, val) ((ushort*)(buf))[index] = (val)
#define XORCHAR(buf, index, val) ((uchar*)(buf))[index] ^= (val)
#endif

/* Functions common to MD4 and MD5 */
#ifdef USE_BITSELECT
#define F(x, y, z)	bitselect((z), (y), (x))
#else
#define F(x, y, z)	((z) ^ ((x) & ((y) ^ (z))))
#endif

#define H(x, y, z)	((x) ^ (y) ^ (z))


/* The basic MD4 functions */
#define MD4G(x, y, z)	(((x) & ((y) | (z))) | ((y) & (z)))


/* The MD4 transformation for all three rounds. */
#define MD4STEP(f, a, b, c, d, x, s)  \
	(a) += f((b), (c), (d)) + (x); \
	    (a) = rotate((a), (uint)(s))


/* Raw'n'lean MD4 with context in output buffer */
/* NOTE: This version thrashes the input block! */
#define	md4_block(block, output) { \
		a = output[0]; \
		b = output[1]; \
		c = output[2]; \
		d = output[3]; \
		MD4STEP(F, a, b, c, d, block[0], 3); \
		MD4STEP(F, d, a, b, c, block[1], 7); \
		MD4STEP(F, c, d, a, b, block[2], 11); \
		MD4STEP(F, b, c, d, a, block[3], 19); \
		MD4STEP(F, a, b, c, d, block[4], 3); \
		MD4STEP(F, d, a, b, c, block[5], 7); \
		MD4STEP(F, c, d, a, b, block[6], 11); \
		MD4STEP(F, b, c, d, a, block[7], 19); \
		MD4STEP(F, a, b, c, d, block[8], 3); \
		MD4STEP(F, d, a, b, c, block[9], 7); \
		MD4STEP(F, c, d, a, b, block[10], 11); \
		MD4STEP(F, b, c, d, a, block[11], 19); \
		MD4STEP(F, a, b, c, d, block[12], 3); \
		MD4STEP(F, d, a, b, c, block[13], 7); \
		MD4STEP(F, c, d, a, b, block[14], 11); \
		MD4STEP(F, b, c, d, a, block[15], 19); \
		MD4STEP(MD4G, a, b, c, d, block[0] + 0x5a827999, 3); \
		MD4STEP(MD4G, d, a, b, c, block[4] + 0x5a827999, 5); \
		MD4STEP(MD4G, c, d, a, b, block[8] + 0x5a827999, 9); \
		MD4STEP(MD4G, b, c, d, a, block[12] + 0x5a827999, 13); \
		MD4STEP(MD4G, a, b, c, d, block[1] + 0x5a827999, 3); \
		MD4STEP(MD4G, d, a, b, c, block[5] + 0x5a827999, 5); \
		MD4STEP(MD4G, c, d, a, b, block[9] + 0x5a827999, 9); \
		MD4STEP(MD4G, b, c, d, a, block[13] + 0x5a827999, 13); \
		MD4STEP(MD4G, a, b, c, d, block[2] + 0x5a827999, 3); \
		MD4STEP(MD4G, d, a, b, c, block[6] + 0x5a827999, 5); \
		MD4STEP(MD4G, c, d, a, b, block[10] + 0x5a827999, 9); \
		MD4STEP(MD4G, b, c, d, a, block[14] + 0x5a827999, 13); \
		MD4STEP(MD4G, a, b, c, d, block[3] + 0x5a827999, 3); \
		MD4STEP(MD4G, d, a, b, c, block[7] + 0x5a827999, 5); \
		MD4STEP(MD4G, c, d, a, b, block[11] + 0x5a827999, 9); \
		MD4STEP(MD4G, b, c, d, a, block[15] + 0x5a827999, 13); \
		MD4STEP(H, a, b, c, d, block[0] + 0x6ed9eba1, 3); \
		MD4STEP(H, d, a, b, c, block[8] + 0x6ed9eba1, 9); \
		MD4STEP(H, c, d, a, b, block[4] + 0x6ed9eba1, 11); \
		MD4STEP(H, b, c, d, a, block[12] + 0x6ed9eba1, 15); \
		MD4STEP(H, a, b, c, d, block[2] + 0x6ed9eba1, 3); \
		MD4STEP(H, d, a, b, c, block[10] + 0x6ed9eba1, 9); \
		MD4STEP(H, c, d, a, b, block[6] + 0x6ed9eba1, 11); \
		MD4STEP(H, b, c, d, a, block[14] + 0x6ed9eba1, 15); \
		MD4STEP(H, a, b, c, d, block[1] + 0x6ed9eba1, 3); \
		MD4STEP(H, d, a, b, c, block[9] + 0x6ed9eba1, 9); \
		MD4STEP(H, c, d, a, b, block[5] + 0x6ed9eba1, 11); \
		MD4STEP(H, b, c, d, a, block[13] + 0x6ed9eba1, 15); \
		MD4STEP(H, a, b, c, d, block[3] + 0x6ed9eba1, 3); \
		MD4STEP(H, d, a, b, c, block[11] + 0x6ed9eba1, 9); \
		MD4STEP(H, c, d, a, b, block[7] + 0x6ed9eba1, 11); \
		MD4STEP(H, b, c, d, a, block[15] + 0x6ed9eba1, 15); \
		output[0] += a; \
		output[1] += b; \
		output[2] += c; \
		output[3] += d; \
	}

/* The basic MD5 functions */
/* F and H are the same as for MD4, above */
#ifdef USE_BITSELECT
#define G(x, y, z)	bitselect((y), (x), (z))
#else
#define G(x, y, z)	((y) ^ ((z) & ((x) ^ (y))))
#endif

#define I(x, y, z)	((y) ^ ((x) | ~(z)))


/* The MD5 transformation for all four rounds. */
#define STEP(f, a, b, c, d, x, t, s)	  \
	(a) += f((b), (c), (d)) + (x) + (t); \
	    (a) = rotate((a), (uint)(s)); \
	    (a) += (b)


/* Raw'n'lean MD5 with context in output buffer */
/* NOTE: This version thrashes the input block! */
#define md5_block(block, output)  \
	{ \
		a = output[0]; \
		b = output[1]; \
		c = output[2]; \
		d = output[3]; \
		STEP(F, a, b, c, d, block[0], 0xd76aa478, 7); \
		STEP(F, d, a, b, c, block[1], 0xe8c7b756, 12); \
		STEP(F, c, d, a, b, block[2], 0x242070db, 17); \
		STEP(F, b, c, d, a, block[3], 0xc1bdceee, 22); \
		STEP(F, a, b, c, d, block[4], 0xf57c0faf, 7); \
		STEP(F, d, a, b, c, block[5], 0x4787c62a, 12); \
		STEP(F, c, d, a, b, block[6], 0xa8304613, 17); \
		STEP(F, b, c, d, a, block[7], 0xfd469501, 22); \
		STEP(F, a, b, c, d, block[8], 0x698098d8, 7); \
		STEP(F, d, a, b, c, block[9], 0x8b44f7af, 12); \
		STEP(F, c, d, a, b, block[10], 0xffff5bb1, 17); \
		STEP(F, b, c, d, a, block[11], 0x895cd7be, 22); \
		STEP(F, a, b, c, d, block[12], 0x6b901122, 7); \
		STEP(F, d, a, b, c, block[13], 0xfd987193, 12); \
		STEP(F, c, d, a, b, block[14], 0xa679438e, 17); \
		STEP(F, b, c, d, a, block[15], 0x49b40821, 22); \
		STEP(G, a, b, c, d, block[1], 0xf61e2562, 5); \
		STEP(G, d, a, b, c, block[6], 0xc040b340, 9); \
		STEP(G, c, d, a, b, block[11], 0x265e5a51, 14); \
		STEP(G, b, c, d, a, block[0], 0xe9b6c7aa, 20); \
		STEP(G, a, b, c, d, block[5], 0xd62f105d, 5); \
		STEP(G, d, a, b, c, block[10], 0x02441453, 9); \
		STEP(G, c, d, a, b, block[15], 0xd8a1e681, 14); \
		STEP(G, b, c, d, a, block[4], 0xe7d3fbc8, 20); \
		STEP(G, a, b, c, d, block[9], 0x21e1cde6, 5); \
		STEP(G, d, a, b, c, block[14], 0xc33707d6, 9); \
		STEP(G, c, d, a, b, block[3], 0xf4d50d87, 14); \
		STEP(G, b, c, d, a, block[8], 0x455a14ed, 20); \
		STEP(G, a, b, c, d, block[13], 0xa9e3e905, 5); \
		STEP(G, d, a, b, c, block[2], 0xfcefa3f8, 9); \
		STEP(G, c, d, a, b, block[7], 0x676f02d9, 14); \
		STEP(G, b, c, d, a, block[12], 0x8d2a4c8a, 20); \
		STEP(H, a, b, c, d, block[5], 0xfffa3942, 4); \
		STEP(H, d, a, b, c, block[8], 0x8771f681, 11); \
		STEP(H, c, d, a, b, block[11], 0x6d9d6122, 16); \
		STEP(H, b, c, d, a, block[14], 0xfde5380c, 23); \
		STEP(H, a, b, c, d, block[1], 0xa4beea44, 4); \
		STEP(H, d, a, b, c, block[4], 0x4bdecfa9, 11); \
		STEP(H, c, d, a, b, block[7], 0xf6bb4b60, 16); \
		STEP(H, b, c, d, a, block[10], 0xbebfbc70, 23); \
		STEP(H, a, b, c, d, block[13], 0x289b7ec6, 4); \
		STEP(H, d, a, b, c, block[0], 0xeaa127fa, 11); \
		STEP(H, c, d, a, b, block[3], 0xd4ef3085, 16); \
		STEP(H, b, c, d, a, block[6], 0x04881d05, 23); \
		STEP(H, a, b, c, d, block[9], 0xd9d4d039, 4); \
		STEP(H, d, a, b, c, block[12], 0xe6db99e5, 11); \
		STEP(H, c, d, a, b, block[15], 0x1fa27cf8, 16); \
		STEP(H, b, c, d, a, block[2], 0xc4ac5665, 23); \
		STEP(I, a, b, c, d, block[0], 0xf4292244, 6); \
		STEP(I, d, a, b, c, block[7], 0x432aff97, 10); \
		STEP(I, c, d, a, b, block[14], 0xab9423a7, 15); \
		STEP(I, b, c, d, a, block[5], 0xfc93a039, 21); \
		STEP(I, a, b, c, d, block[12], 0x655b59c3, 6); \
		STEP(I, d, a, b, c, block[3], 0x8f0ccc92, 10); \
		STEP(I, c, d, a, b, block[10], 0xffeff47d, 15); \
		STEP(I, b, c, d, a, block[1], 0x85845dd1, 21); \
		STEP(I, a, b, c, d, block[8], 0x6fa87e4f, 6); \
		STEP(I, d, a, b, c, block[15], 0xfe2ce6e0, 10); \
		STEP(I, c, d, a, b, block[6], 0xa3014314, 15); \
		STEP(I, b, c, d, a, block[13], 0x4e0811a1, 21); \
		STEP(I, a, b, c, d, block[4], 0xf7537e82, 6); \
		STEP(I, d, a, b, c, block[11], 0xbd3af235, 10); \
		STEP(I, c, d, a, b, block[2], 0x2ad7d2bb, 15); \
		STEP(I, b, c, d, a, block[9], 0xeb86d391, 21); \
		output[0] += a; \
		output[1] += b; \
		output[2] += c; \
		output[3] += d; \
	}


#define md5_init(output) {	  \
	output[0] = 0x67452301; \
	output[1] = 0xefcdab89; \
	output[2] = 0x98badcfe; \
	output[3] = 0x10325476; \
	}

#define md4_init(output)	md5_init(output)

#define dump_stuff_msg(msg, x, size) {	  \
		uint ii; \
		printf("%s : ", msg); \
		for (ii = 0; ii < (size)/4; ii++) \
			printf("%08x ", SWAP32(x[ii])); \
		printf("\n"); \
	}


#ifdef ENC_UTF_8

__kernel void ntlmv2_nthash(const __global uchar *password, __global uint *nthash)
{
	uint i;
	uint gid = get_global_id(0);
	uint block[16];
	uint a, b, c, d;
	uint output[4];
	const __global UTF8 *source = &password[gid * KEYBUF_SIZE];
	const __global UTF8 *sourceEnd = &source[KEYBUF_SIZE];
	UTF16 *target = (UTF16*)block;
	UTF16 *targetStart = target;
	const UTF16 *targetEnd = &target[28];
	UTF32 ch;
	uint extraBytesToRead;

	for (i = 0; i < 14; i++)
		block[i] = 0;

	/* Input buffer is UTF-8 with zero-termination */
	while (source < sourceEnd) {
		if (*source < 0xC0) {
			*target++ = (UTF16)*source++;
			if (*source == 0 || target >= targetEnd) {
				break;
			}
			continue;
		}
		ch = *source;
		// This point must not be reached with *source < 0xC0
		extraBytesToRead =
			opt_trailingBytesUTF8[ch & 0x3f];
		if (source + extraBytesToRead >= sourceEnd) {
			break;
		}
		switch (extraBytesToRead) {
		case 3:
			ch <<= 6;
			ch += *++source;
		case 2:
			ch <<= 6;
			ch += *++source;
		case 1:
			ch <<= 6;
			ch += *++source;
			++source;
			break;
		default:
			*target = 0x80;
			break; // from switch
		}
		if (*target == 0x80)
			break; // from while
		ch -= offsetsFromUTF8[extraBytesToRead];
#ifdef UCS_2
		/* UCS-2 only */
		*target++ = (UTF16)ch;
#else
		/* full UTF-16 with surrogate pairs */
		if (ch <= UNI_MAX_BMP) {  /* Target is a character <= 0xFFFF */
			*target++ = (UTF16)ch;
		} else {  /* target is a character in range 0xFFFF - 0x10FFFF. */
			if (target + 1 >= targetEnd)
				break;
			ch -= halfBase;
			*target++ = (UTF16)((ch >> halfShift) + UNI_SUR_HIGH_START);
			*target++ = (UTF16)((ch & halfMask) + UNI_SUR_LOW_START);
		}
#endif
		if (*source == 0 || target >= targetEnd)
			break;
	}
	*target = 0x80;	// Terminate

	block[14] = (uint)(target - targetStart) << 4;
	block[15] = 0;
	//dump_stuff_msg("buffer", block, 64);

	/* Initial hash of password */
	md4_init(output);
	md4_block(block, output);
	//dump_stuff_msg("output", output, 16);

	for (i = 0; i < 4; i++)
		nthash[gid * 4 + i] = output[i];
}

#elif !defined(ENC_ISO_8859_1) && !defined(ENC_RAW)

__constant UTF16 ISO_8859_2[] = {
0x0080,0x0081,0x0082,0x0083,0x0084,0x0085,0x0086,0x0087,0x0088,0x0089,0x008A,0x008B,0x008C,0x008D,0x008E,0x008F,
0x0090,0x0091,0x0092,0x0093,0x0094,0x0095,0x0096,0x0097,0x0098,0x0099,0x009A,0x009B,0x009C,0x009D,0x009E,0x009F,
0x00A0,0x0104,0x02D8,0x0141,0x00A4,0x013D,0x015A,0x00A7,0x00A8,0x0160,0x015E,0x0164,0x0179,0x00AD,0x017D,0x017B,
0x00B0,0x0105,0x02DB,0x0142,0x00B4,0x013E,0x015B,0x02C7,0x00B8,0x0161,0x015F,0x0165,0x017A,0x02DD,0x017E,0x017C,
0x0154,0x00C1,0x00C2,0x0102,0x00C4,0x0139,0x0106,0x00C7,0x010C,0x00C9,0x0118,0x00CB,0x011A,0x00CD,0x00CE,0x010E,
0x0110,0x0143,0x0147,0x00D3,0x00D4,0x0150,0x00D6,0x00D7,0x0158,0x016E,0x00DA,0x0170,0x00DC,0x00DD,0x0162,0x00DF,
0x0155,0x00E1,0x00E2,0x0103,0x00E4,0x013A,0x0107,0x00E7,0x010D,0x00E9,0x0119,0x00EB,0x011B,0x00ED,0x00EE,0x010F,
0x0111,0x0144,0x0148,0x00F3,0x00F4,0x0151,0x00F6,0x00F7,0x0159,0x016F,0x00FA,0x0171,0x00FC,0x00FD,0x0163,0x02D9 };

__constant UTF16 ISO_8859_7[] = {
0x0080,0x0081,0x0082,0x0083,0x0084,0x0085,0x0086,0x0087,0x0088,0x0089,0x008A,0x008B,0x008C,0x008D,0x008E,0x008F,
0x0090,0x0091,0x0092,0x0093,0x0094,0x0095,0x0096,0x0097,0x0098,0x0099,0x009A,0x009B,0x009C,0x009D,0x009E,0x009F,
0x00A0,0x2018,0x2019,0x00A3,0x20AC,0x20AF,0x00A6,0x00A7,0x00A8,0x00A9,0x037A,0x00AB,0x00AC,0x00AD,0x00AE,0x2015,
0x00B0,0x00B1,0x00B2,0x00B3,0x0384,0x0385,0x0386,0x00B7,0x0388,0x0389,0x038A,0x00BB,0x038C,0x00BD,0x038E,0x038F,
0x0390,0x0391,0x0392,0x0393,0x0394,0x0395,0x0396,0x0397,0x0398,0x0399,0x039A,0x039B,0x039C,0x039D,0x039E,0x039F,
0x03A0,0x03A1,0x00D2,0x03A3,0x03A4,0x03A5,0x03A6,0x03A7,0x03A8,0x03A9,0x03AA,0x03AB,0x03AC,0x03AD,0x03AE,0x03AF,
0x03B0,0x03B1,0x03B2,0x03B3,0x03B4,0x03B5,0x03B6,0x03B7,0x03B8,0x03B9,0x03BA,0x03BB,0x03BC,0x03BD,0x03BE,0x03BF,
0x03C0,0x03C1,0x03C2,0x03C3,0x03C4,0x03C5,0x03C6,0x03C7,0x03C8,0x03C9,0x03CA,0x03CB,0x03CC,0x03CD,0x03CE,0x00FF };

__constant UTF16 ISO_8859_15[] = {
0x0080,0x0081,0x0082,0x0083,0x0084,0x0085,0x0086,0x0087,0x0088,0x0089,0x008A,0x008B,0x008C,0x008D,0x008E,0x008F,
0x0090,0x0091,0x0092,0x0093,0x0094,0x0095,0x0096,0x0097,0x0098,0x0099,0x009A,0x009B,0x009C,0x009D,0x009E,0x009F,
0x00A0,0x00A1,0x00A2,0x00A3,0x20AC,0x00A5,0x0160,0x00A7,0x0161,0x00A9,0x00AA,0x00AB,0x00AC,0x00AD,0x00AE,0x00AF,
0x00B0,0x00B1,0x00B2,0x00B3,0x017D,0x00B5,0x00B6,0x00B7,0x017E,0x00B9,0x00BA,0x00BB,0x0152,0x0153,0x0178,0x00BF,
0x00C0,0x00C1,0x00C2,0x00C3,0x00C4,0x00C5,0x00C6,0x00C7,0x00C8,0x00C9,0x00CA,0x00CB,0x00CC,0x00CD,0x00CE,0x00CF,
0x00D0,0x00D1,0x00D2,0x00D3,0x00D4,0x00D5,0x00D6,0x00D7,0x00D8,0x00D9,0x00DA,0x00DB,0x00DC,0x00DD,0x00DE,0x00DF,
0x00E0,0x00E1,0x00E2,0x00E3,0x00E4,0x00E5,0x00E6,0x00E7,0x00E8,0x00E9,0x00EA,0x00EB,0x00EC,0x00ED,0x00EE,0x00EF,
0x00F0,0x00F1,0x00F2,0x00F3,0x00F4,0x00F5,0x00F6,0x00F7,0x00F8,0x00F9,0x00FA,0x00FB,0x00FC,0x00FD,0x00FE,0x00FF };

__constant UTF16 KOI8_R[] = {
0x2500,0x2502,0x250C,0x2510,0x2514,0x2518,0x251C,0x2524,0x252C,0x2534,0x253C,0x2580,0x2584,0x2588,0x258C,0x2590,
0x2591,0x2592,0x2593,0x2320,0x25A0,0x2219,0x221A,0x2248,0x2264,0x2265,0x00A0,0x2321,0x00B0,0x00B2,0x00B7,0x00F7,
0x2550,0x2551,0x2552,0x0451,0x2553,0x2554,0x2555,0x2556,0x2557,0x2558,0x2559,0x255A,0x255B,0x255C,0x255D,0x255E,
0x255F,0x2560,0x2561,0x0401,0x2562,0x2563,0x2564,0x2565,0x2566,0x2567,0x2568,0x2569,0x256A,0x256B,0x256C,0x00A9,
0x044E,0x0430,0x0431,0x0446,0x0434,0x0435,0x0444,0x0433,0x0445,0x0438,0x0439,0x043A,0x043B,0x043C,0x043D,0x043E,
0x043F,0x044F,0x0440,0x0441,0x0442,0x0443,0x0436,0x0432,0x044C,0x044B,0x0437,0x0448,0x044D,0x0449,0x0447,0x044A,
0x042E,0x0410,0x0411,0x0426,0x0414,0x0415,0x0424,0x0413,0x0425,0x0418,0x0419,0x041A,0x041B,0x041C,0x041D,0x041E,
0x041F,0x042F,0x0420,0x0421,0x0422,0x0423,0x0416,0x0412,0x042C,0x042B,0x0417,0x0428,0x042D,0x0429,0x0427,0x042A };

__constant UTF16 CP437[] = {
0x00C7,0x00FC,0x00E9,0x00E2,0x00E4,0x00E0,0x00E5,0x00E7,0x00EA,0x00EB,0x00E8,0x00EF,0x00EE,0x00EC,0x00C4,0x00C5,
0x00C9,0x00E6,0x00C6,0x00F4,0x00F6,0x00F2,0x00FB,0x00F9,0x00FF,0x00D6,0x00DC,0x00A2,0x00A3,0x00A5,0x20A7,0x0192,
0x00E1,0x00ED,0x00F3,0x00FA,0x00F1,0x00D1,0x00AA,0x00BA,0x00BF,0x2310,0x00AC,0x00BD,0x00BC,0x00A1,0x00AB,0x00BB,
0x2591,0x2592,0x2593,0x2502,0x2524,0x2561,0x2562,0x2556,0x2555,0x2563,0x2551,0x2557,0x255D,0x255C,0x255B,0x2510,
0x2514,0x2534,0x252C,0x251C,0x2500,0x253C,0x255E,0x255F,0x255A,0x2554,0x2569,0x2566,0x2560,0x2550,0x256C,0x2567,
0x2568,0x2564,0x2565,0x2559,0x2558,0x2552,0x2553,0x256B,0x256A,0x2518,0x250C,0x2588,0x2584,0x258C,0x2590,0x2580,
0x03B1,0x00DF,0x0393,0x03C0,0x03A3,0x03C3,0x00B5,0x03C4,0x03A6,0x0398,0x03A9,0x03B4,0x221E,0x03C6,0x03B5,0x2229,
0x2261,0x00B1,0x2265,0x2264,0x2320,0x2321,0x00F7,0x2248,0x00B0,0x2219,0x00B7,0x221A,0x207F,0x00B2,0x25A0,0x00A0 };

__constant UTF16 CP737[] = {
0x0391,0x0392,0x0393,0x0394,0x0395,0x0396,0x0397,0x0398,0x0399,0x039A,0x039B,0x039C,0x039D,0x039E,0x039F,0x03A0,
0x03A1,0x03A3,0x03A4,0x03A5,0x03A6,0x03A7,0x03A8,0x03A9,0x03B1,0x03B2,0x03B3,0x03B4,0x03B5,0x03B6,0x03B7,0x03B8,
0x03B9,0x03BA,0x03BB,0x03BC,0x03BD,0x03BE,0x03BF,0x03C0,0x03C1,0x03C3,0x03C2,0x03C4,0x03C5,0x03C6,0x03C7,0x03C8,
0x2591,0x2592,0x2593,0x2502,0x2524,0x2561,0x2562,0x2556,0x2555,0x2563,0x2551,0x2557,0x255D,0x255C,0x255B,0x2510,
0x2514,0x2534,0x252C,0x251C,0x2500,0x253C,0x255E,0x255F,0x255A,0x2554,0x2569,0x2566,0x2560,0x2550,0x256C,0x2567,
0x2568,0x2564,0x2565,0x2559,0x2558,0x2552,0x2553,0x256B,0x256A,0x2518,0x250C,0x2588,0x2584,0x258C,0x2590,0x2580,
0x03C9,0x03AC,0x03AD,0x03AE,0x03CA,0x03AF,0x03CC,0x03CD,0x03CB,0x03CE,0x0386,0x0388,0x0389,0x038A,0x038C,0x038E,
0x038F,0x00B1,0x2265,0x2264,0x03AA,0x03AB,0x00F7,0x2248,0x00B0,0x2219,0x00B7,0x221A,0x207F,0x00B2,0x25A0,0x00A0 };

__constant UTF16 CP850[] = {
0x00C7,0x00FC,0x00E9,0x00E2,0x00E4,0x00E0,0x00E5,0x00E7,0x00EA,0x00EB,0x00E8,0x00EF,0x00EE,0x00EC,0x00C4,0x00C5,
0x00C9,0x00E6,0x00C6,0x00F4,0x00F6,0x00F2,0x00FB,0x00F9,0x00FF,0x00D6,0x00DC,0x00F8,0x00A3,0x00D8,0x00D7,0x0192,
0x00E1,0x00ED,0x00F3,0x00FA,0x00F1,0x00D1,0x00AA,0x00BA,0x00BF,0x00AE,0x00AC,0x00BD,0x00BC,0x00A1,0x00AB,0x00BB,
0x2591,0x2592,0x2593,0x2502,0x2524,0x00C1,0x00C2,0x00C0,0x00A9,0x2563,0x2551,0x2557,0x255D,0x00A2,0x00A5,0x2510,
0x2514,0x2534,0x252C,0x251C,0x2500,0x253C,0x00E3,0x00C3,0x255A,0x2554,0x2569,0x2566,0x2560,0x2550,0x256C,0x00A4,
0x00F0,0x00D0,0x00CA,0x00CB,0x00C8,0x0131,0x00CD,0x00CE,0x00CF,0x2518,0x250C,0x2588,0x2584,0x00A6,0x00CC,0x2580,
0x00D3,0x00DF,0x00D4,0x00D2,0x00F5,0x00D5,0x00B5,0x00FE,0x00DE,0x00DA,0x00DB,0x00D9,0x00FD,0x00DD,0x00AF,0x00B4,
0x00AD,0x00B1,0x2017,0x00BE,0x00B6,0x00A7,0x00F7,0x00B8,0x00B0,0x00A8,0x00B7,0x00B9,0x00B3,0x00B2,0x25A0,0x00A0 };

__constant UTF16 CP852[] = {
0x00C7,0x00FC,0x00E9,0x00E2,0x00E4,0x016F,0x0107,0x00E7,0x0142,0x00EB,0x0150,0x0151,0x00EE,0x0179,0x00C4,0x0106,
0x00C9,0x0139,0x013A,0x00F4,0x00F6,0x013D,0x013E,0x015A,0x015B,0x00D6,0x00DC,0x0164,0x0165,0x0141,0x00D7,0x010D,
0x00E1,0x00ED,0x00F3,0x00FA,0x0104,0x0105,0x017D,0x017E,0x0118,0x0119,0x00AC,0x017A,0x010C,0x015F,0x00AB,0x00BB,
0x2591,0x2592,0x2593,0x2502,0x2524,0x00C1,0x00C2,0x011A,0x015E,0x2563,0x2551,0x2557,0x255D,0x017B,0x017C,0x2510,
0x2514,0x2534,0x252C,0x251C,0x2500,0x253C,0x0102,0x0103,0x255A,0x2554,0x2569,0x2566,0x2560,0x2550,0x256C,0x00A4,
0x0111,0x0110,0x010E,0x00CB,0x010F,0x0147,0x00CD,0x00CE,0x011B,0x2518,0x250C,0x2588,0x2584,0x0162,0x016E,0x2580,
0x00D3,0x00DF,0x00D4,0x0143,0x0144,0x0148,0x0160,0x0161,0x0154,0x00DA,0x0155,0x0170,0x00FD,0x00DD,0x0163,0x00B4,
0x00AD,0x02DD,0x02DB,0x02C7,0x02D8,0x00A7,0x00F7,0x00B8,0x00B0,0x00A8,0x02D9,0x0171,0x0158,0x0159,0x25A0,0x00A0 };

__constant UTF16 CP858[] = {
0x00C7,0x00FC,0x00E9,0x00E2,0x00E4,0x00E0,0x00E5,0x00E7,0x00EA,0x00EB,0x00E8,0x00EF,0x00EE,0x00EC,0x00C4,0x00C5,
0x00C9,0x00E6,0x00C6,0x00F4,0x00F6,0x00F2,0x00FB,0x00F9,0x00FF,0x00D6,0x00DC,0x00F8,0x00A3,0x00D8,0x00D7,0x0192,
0x00E1,0x00ED,0x00F3,0x00FA,0x00F1,0x00D1,0x00AA,0x00BA,0x00BF,0x00AE,0x00AC,0x00BD,0x00BC,0x00A1,0x00AB,0x00BB,
0x2591,0x2592,0x2593,0x2502,0x2524,0x00C1,0x00C2,0x00C0,0x00A9,0x2563,0x2551,0x2557,0x255D,0x00A2,0x00A5,0x2510,
0x2514,0x2534,0x252C,0x251C,0x2500,0x253C,0x00E3,0x00C3,0x255A,0x2554,0x2569,0x2566,0x2560,0x2550,0x256C,0x00A4,
0x00F0,0x00D0,0x00CA,0x00CB,0x00C8,0x20AC,0x00CD,0x00CE,0x00CF,0x2518,0x250C,0x2588,0x2584,0x00A6,0x00CC,0x2580,
0x00D3,0x00DF,0x00D4,0x00D2,0x00F5,0x00D5,0x00B5,0x00FE,0x00DE,0x00DA,0x00DB,0x00D9,0x00FD,0x00DD,0x00AF,0x00B4,
0x00AD,0x00B1,0x2017,0x00BE,0x00B6,0x00A7,0x00F7,0x00B8,0x00B0,0x00A8,0x00B7,0x00B9,0x00B3,0x00B2,0x25A0,0x00A0 };

__constant UTF16 CP866[] = {
0x0410,0x0411,0x0412,0x0413,0x0414,0x0415,0x0416,0x0417,0x0418,0x0419,0x041A,0x041B,0x041C,0x041D,0x041E,0x041F,
0x0420,0x0421,0x0422,0x0423,0x0424,0x0425,0x0426,0x0427,0x0428,0x0429,0x042A,0x042B,0x042C,0x042D,0x042E,0x042F,
0x0430,0x0431,0x0432,0x0433,0x0434,0x0435,0x0436,0x0437,0x0438,0x0439,0x043A,0x043B,0x043C,0x043D,0x043E,0x043F,
0x2591,0x2592,0x2593,0x2502,0x2524,0x2561,0x2562,0x2556,0x2555,0x2563,0x2551,0x2557,0x255D,0x255C,0x255B,0x2510,
0x2514,0x2534,0x252C,0x251C,0x2500,0x253C,0x255E,0x255F,0x255A,0x2554,0x2569,0x2566,0x2560,0x2550,0x256C,0x2567,
0x2568,0x2564,0x2565,0x2559,0x2558,0x2552,0x2553,0x256B,0x256A,0x2518,0x250C,0x2588,0x2584,0x258C,0x2590,0x2580,
0x0440,0x0441,0x0442,0x0443,0x0444,0x0445,0x0446,0x0447,0x0448,0x0449,0x044A,0x044B,0x044C,0x044D,0x044E,0x044F,
0x0401,0x0451,0x0404,0x0454,0x0407,0x0457,0x040E,0x045E,0x00B0,0x2219,0x00B7,0x221A,0x2116,0x00A4,0x25A0,0x00A0 };

__constant UTF16 CP1250[] = {
0x20AC,0x0081,0x201A,0x0083,0x201E,0x2026,0x2020,0x2021,0x0088,0x2030,0x0160,0x2039,0x015A,0x0164,0x017D,0x0179,
0x0090,0x2018,0x2019,0x201C,0x201D,0x2022,0x2013,0x2014,0x0098,0x2122,0x0161,0x203A,0x015B,0x0165,0x017E,0x017A,
0x00A0,0x02C7,0x02D8,0x0141,0x00A4,0x0104,0x00A6,0x00A7,0x00A8,0x00A9,0x015E,0x00AB,0x00AC,0x00AD,0x00AE,0x017B,
0x00B0,0x00B1,0x02DB,0x0142,0x00B4,0x00B5,0x00B6,0x00B7,0x00B8,0x0105,0x015F,0x00BB,0x013D,0x02DD,0x013E,0x017C,
0x0154,0x00C1,0x00C2,0x0102,0x00C4,0x0139,0x0106,0x00C7,0x010C,0x00C9,0x0118,0x00CB,0x011A,0x00CD,0x00CE,0x010E,
0x0110,0x0143,0x0147,0x00D3,0x00D4,0x0150,0x00D6,0x00D7,0x0158,0x016E,0x00DA,0x0170,0x00DC,0x00DD,0x0162,0x00DF,
0x0155,0x00E1,0x00E2,0x0103,0x00E4,0x013A,0x0107,0x00E7,0x010D,0x00E9,0x0119,0x00EB,0x011B,0x00ED,0x00EE,0x010F,
0x0111,0x0144,0x0148,0x00F3,0x00F4,0x0151,0x00F6,0x00F7,0x0159,0x016F,0x00FA,0x0171,0x00FC,0x00FD,0x0163,0x02D9 };

__constant UTF16 CP1251[] = {
0x0402,0x0403,0x201A,0x0453,0x201E,0x2026,0x2020,0x2021,0x20AC,0x2030,0x0409,0x2039,0x040A,0x040C,0x040B,0x040F,
0x0452,0x2018,0x2019,0x201C,0x201D,0x2022,0x2013,0x2014,0x0098,0x2122,0x0459,0x203A,0x045A,0x045C,0x045B,0x045F,
0x00A0,0x040E,0x045E,0x0408,0x00A4,0x0490,0x00A6,0x00A7,0x0401,0x00A9,0x0404,0x00AB,0x00AC,0x00AD,0x00AE,0x0407,
0x00B0,0x00B1,0x0406,0x0456,0x0491,0x00B5,0x00B6,0x00B7,0x0451,0x2116,0x0454,0x00BB,0x0458,0x0405,0x0455,0x0457,
0x0410,0x0411,0x0412,0x0413,0x0414,0x0415,0x0416,0x0417,0x0418,0x0419,0x041A,0x041B,0x041C,0x041D,0x041E,0x041F,
0x0420,0x0421,0x0422,0x0423,0x0424,0x0425,0x0426,0x0427,0x0428,0x0429,0x042A,0x042B,0x042C,0x042D,0x042E,0x042F,
0x0430,0x0431,0x0432,0x0433,0x0434,0x0435,0x0436,0x0437,0x0438,0x0439,0x043A,0x043B,0x043C,0x043D,0x043E,0x043F,
0x0440,0x0441,0x0442,0x0443,0x0444,0x0445,0x0446,0x0447,0x0448,0x0449,0x044A,0x044B,0x044C,0x044D,0x044E,0x044F };

__constant UTF16 CP1252[] = {
0x20AC,0x0081,0x201A,0x0192,0x201E,0x2026,0x2020,0x2021,0x02C6,0x2030,0x0160,0x2039,0x0152,0x008D,0x017D,0x008F,
0x0090,0x2018,0x2019,0x201C,0x201D,0x2022,0x2013,0x2014,0x02DC,0x2122,0x0161,0x203A,0x0153,0x009D,0x017E,0x0178,
0x00A0,0x00A1,0x00A2,0x00A3,0x00A4,0x00A5,0x00A6,0x00A7,0x00A8,0x00A9,0x00AA,0x00AB,0x00AC,0x00AD,0x00AE,0x00AF,
0x00B0,0x00B1,0x00B2,0x00B3,0x00B4,0x00B5,0x00B6,0x00B7,0x00B8,0x00B9,0x00BA,0x00BB,0x00BC,0x00BD,0x00BE,0x00BF,
0x00C0,0x00C1,0x00C2,0x00C3,0x00C4,0x00C5,0x00C6,0x00C7,0x00C8,0x00C9,0x00CA,0x00CB,0x00CC,0x00CD,0x00CE,0x00CF,
0x00D0,0x00D1,0x00D2,0x00D3,0x00D4,0x00D5,0x00D6,0x00D7,0x00D8,0x00D9,0x00DA,0x00DB,0x00DC,0x00DD,0x00DE,0x00DF,
0x00E0,0x00E1,0x00E2,0x00E3,0x00E4,0x00E5,0x00E6,0x00E7,0x00E8,0x00E9,0x00EA,0x00EB,0x00EC,0x00ED,0x00EE,0x00EF,
0x00F0,0x00F1,0x00F2,0x00F3,0x00F4,0x00F5,0x00F6,0x00F7,0x00F8,0x00F9,0x00FA,0x00FB,0x00FC,0x00FD,0x00FE,0x00FF };

__constant UTF16 CP1253[] = {
0x20AC,0x0081,0x201A,0x0192,0x201E,0x2026,0x2020,0x2021,0x0088,0x2030,0x008A,0x2039,0x008C,0x008D,0x008E,0x008F,
0x0090,0x2018,0x2019,0x201C,0x201D,0x2022,0x2013,0x2014,0x0098,0x2122,0x009A,0x203A,0x009C,0x009D,0x009E,0x009F,
0x00A0,0x0385,0x0386,0x00A3,0x00A4,0x00A5,0x00A6,0x00A7,0x00A8,0x00A9,0x00AA,0x00AB,0x00AC,0x00AD,0x00AE,0x2015,
0x00B0,0x00B1,0x00B2,0x00B3,0x0384,0x00B5,0x00B6,0x00B7,0x0388,0x0389,0x038A,0x00BB,0x038C,0x00BD,0x038E,0x038F,
0x0390,0x0391,0x0392,0x0393,0x0394,0x0395,0x0396,0x0397,0x0398,0x0399,0x039A,0x039B,0x039C,0x039D,0x039E,0x039F,
0x03A0,0x03A1,0x00D2,0x03A3,0x03A4,0x03A5,0x03A6,0x03A7,0x03A8,0x03A9,0x03AA,0x03AB,0x03AC,0x03AD,0x03AE,0x03AF,
0x03B0,0x03B1,0x03B2,0x03B3,0x03B4,0x03B5,0x03B6,0x03B7,0x03B8,0x03B9,0x03BA,0x03BB,0x03BC,0x03BD,0x03BE,0x03BF,
0x03C0,0x03C1,0x03C2,0x03C3,0x03C4,0x03C5,0x03C6,0x03C7,0x03C8,0x03C9,0x03CA,0x03CB,0x03CC,0x03CD,0x03CE,0x00FF };

__kernel void ntlmv2_nthash(const __global uchar *password, __global uint *nthash)
{
	uint i;
	uint gid = get_global_id(0);
	uint block[16];
	uint a, b, c, d;
	uint output[4];
	const __global uchar *pw = &password[gid * KEYBUF_SIZE];

	for (i = 0; i < 14; i++)
		block[i] = 0;

	/* Input buffer is in a 'codepage' encoding, with zero-termination */
	for (i = 0; pw[i] && i < KEYBUF_SIZE; i++)
		((UTF16*)block)[i] = (pw[i] < 0x80) ?
		         pw[i] : ENCODING[pw[i] & 0x7f];
	PUTCHAR(block, 2 * i, 0x80);
	block[14] = i << 4;
	block[15] = 0;

	/* Initial hash of password */
	md4_init(output);
	md4_block(block, output);

	for (i = 0; i < 4; i++)
		nthash[gid * 4 + i] = output[i];
}

#else

 /* we can just type-cast this to UTF16 */
__kernel void ntlmv2_nthash(const __global uchar *password, __global uint *nthash)
{
	uint i;
	uint gid = get_global_id(0);
	uint block[16];
	uint a, b, c, d;
	uint output[4];
	const __global uchar *pw = &password[gid * KEYBUF_SIZE];

	for (i = 0; i < 14; i++)
		block[i] = 0;

	/* Input buffer is ISO-8859-1 with zero-termination */
	for (i = 0; pw[i] && i < KEYBUF_SIZE; i++)
		PUTCHAR(block, 2 * i, pw[i]);
	PUTCHAR(block, 2 * i, 0x80);
	block[14] = i << 4;
	block[15] = 0;

	/* Initial hash of password */
	md4_init(output);
	md4_block(block, output);

	for (i = 0; i < 4; i++)
		nthash[gid * 4 + i] = output[i];
}

#endif /* encodings */

__kernel void ntlmv2_final(const __global uint *nthash, MAYBE_CONSTANT uint *challenge, __global uint *result)
{
	uint i;
	uint gid = get_global_id(0);
	uint gws = get_global_size(0);
	uint block[16];
	uint output[4], hash[4];
	uint a, b, c, d;
	MAYBE_CONSTANT uint *cp = challenge; /* identity[16].len,server_chal.client_chal[len] */
	uint challenge_size;

	/* 1st HMAC */
	md5_init(output);

	for (i = 0; i < 4; i++)
		block[i] = 0x36363636 ^ nthash[gid * 4 + i];
	for (i = 4; i < 16; i++)
		block[i] = 0x36363636;
	md5_block(block, output); /* md5_update(ipad, 64) */

	/* Salt buffer is prepared with 0x80, zero-padding and length,
	 * ie. (saltlen + 64) << 3 in get_salt() */
	for (i = 0; i < 16; i++)
		block[i] = *cp++;
	md5_block(block, output); /* md5_update(salt, saltlen), md5_final() */

	for (i = 0; i < 4; i++)
		hash[i] = output[i];
	for (i = 0; i < 4; i++)
		block[i] = 0x5c5c5c5c ^ nthash[gid * 4 + i];

	md5_init(output);
	for (i = 4; i < 16; i++)
		block[i] = 0x5c5c5c5c;
	md5_block(block, output); /* md5_update(opad, 64) */

	for (i = 0; i < 4; i++)
		block[i] = hash[i];
	block[4] = 0x80;
	for (i = 5; i < 14; i++)
		block[i] = 0;
	block[14] = (64 + 16) << 3;
	block[15] = 0;
	md5_block(block, output); /* md5_update(hash, 16), md5_final() */

	/* 2nd HMAC */
	for (i = 0; i < 4; i++)
		hash[i] = output[i];
	for (i = 0; i < 4; i++)
		block[i] = 0x36363636 ^ output[i];

	md5_init(output);
	for (i = 4; i < 16; i++)
		block[i] = 0x36363636;
	md5_block(block, output); /* md5_update(ipad, 64) */

	/* Challenge:  blocks (of MD5),
	 * Server Challenge + Client Challenge (Blob) +
	 * 0x80, null padded and len set in get_salt() */
	challenge_size = *cp++;

	/* At least this will not diverge */
	while (challenge_size--) {
		for (i = 0; i < 16; i++)
			block[i] = *cp++;
		md5_block(block, output); /* md5_update(challenge, len), md5_final() */
	}

	for (i = 0; i < 4; i++)
		block[i] = 0x5c5c5c5c ^ hash[i];
	for (i = 0; i < 4; i++)
		hash[i] = output[i];

	md5_init(output);
	for (i = 4; i < 16; i++)
		block[i] = 0x5c5c5c5c;
	md5_block(block, output); /* md5_update(opad, 64) */

	for (i = 0; i < 4; i++)
		block[i] = hash[i];
	block[4] = 0x80;
	for (i = 5; i < 14; i++)
		block[i] = 0;
	block[14] = (64 + 16) << 3;
	block[15] = 0;
	md5_block(block, output); /* md5_update(hash, 16), md5_final() */

	for (i = 0; i < 4; i++)
		result[i * gws + gid] = output[i];
}
